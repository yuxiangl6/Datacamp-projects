import pandas as pd
import numpy as np

import pandas as pd
import numpy as np

# SOURCE: main table
bank_marketing_df = pd.read_csv('bank_marketing.csv')
print(bank_marketing_df.dtypes)


# client table
client = bank_marketing_df[['client_id','age','job','marital','education','credit_default','mortgage']]
# Replace string '.' with '_'
client['job'] = client['job'].str.replace('.', '_')
client['education'] = client['education'].str.replace('.', '_')
# Replace string 'unknown' with NaN
client['education'] = client['education'].replace('unknown', np.NaN)
client['credit_default'] = client['credit_default'].astype('bool')
client['mortgage'] = client['mortgage'].astype('bool')
print(client.dtypes)


# campaign table
campaign = bank_marketing_df[['client_id','number_contacts','contact_duration','previous_campaign_contacts','previous_outcome','campaign_outcome','month','day']]
# Change data types for 'previous_outcome' & 'campaign_outcome' fields to bool
campaign['previous_outcome'] = campaign['previous_outcome'].astype('bool')
campaign['campaign_outcome'] = campaign['campaign_outcome'].astype('bool')
# Re-define months from mmm format to mm format, as string data types
month_mmm_str = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec']
month_mm_str = ['01','02','03','04','05','06','07','08','09','10','11','12']
# Replace values from mmm format to mm format
campaign['month'] = campaign['month'].replace(month_mmm_str, month_mm_str)
# In order to use len to identify single values, will require to change data types from int to string
campaign['day'] = campaign['day'].astype('string')
# Lambda as function that is applied to 'day' field to transform data by adding leading zeros to single day values
campaign['day'] = campaign['day'].apply(lambda x: '0' + x if len(x)<2 else x)
# Concat year, month, date & changing data type from string to datetime
campaign['last_contact_date'] = '2022' + '-' + campaign['month'] + '-' + campaign['day']
campaign['last_contact_date'] = campaign['last_contact_date'].astype('datetime64[ns]')
# Drop month, day fields to fulfil requirements
campaign.drop(['day','month'], axis='columns', inplace=True)
print(campaign.dtypes)


# economics table
economics = bank_marketing_df[['client_id','cons_price_idx','euribor_three_months']]

# csv exports
client.to_csv('client.csv')
campaign.to_csv('campaign.csv')
economics.to_csv('economics.csv')
